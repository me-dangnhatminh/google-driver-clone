datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model FileRef {
  id         String    @id @map("id")
  name       String    @map("name")
  size       BigInt    @map("size")
  createdAt  DateTime  @map("created_at")
  modifiedAt DateTime  @map("modified_at")
  archivedAt DateTime? @map("archived_at")

  // -- cutom metadata
  ownerId     String    @map("owner_id")
  pinnedAt    DateTime? @map("pinned_at")
  contentType String    @map("content_type")
  thumbnail   String?   @map("thumbnail")
  description String?   @map("description")

  folder FileInFolder[]
  perm   FilePermission? @relation("file_permission")

  @@map("files")
}

model Folder {
  id         String    @id @map("id")
  name       String    @map("name")
  size       BigInt    @map("size")
  createdAt  DateTime  @map("created_at")
  modifiedAt DateTime  @map("modified_at")
  archivedAt DateTime? @map("archived_at")

  // -- cutom metadata
  ownerId  String    @map("owner_id")
  pinnedAt DateTime? @map("pinned_at")

  // -- hierarchy and parent-child
  rootId   String? @map("root_id")
  parentId String? @map("parent_id")
  depth    Int     @map("depth")
  lft      Int     @map("lft")
  rgt      Int     @map("rgt")

  // -- content
  files   FileInFolder[] // @relation("FileInFolder")
  folders Folder[]       @relation("ParentChild")

  parent    Folder?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  root      Folder?  @relation("RootFlatChild", fields: [rootId], references: [id], onDelete: Cascade)
  flatChild Folder[] @relation("RootFlatChild")

  // -- for service (MyStorage)
  myStorage MyStorage?        @relation("MyStorage")
  perm      FolderPermission? @relation("folder_permission")

  @@index([lft, rgt])
  @@map("folder_hierarchy")
}

model FileInFolder {
  fileId   String  @id @map("file_id")
  folderId String  @map("folder_id")
  folder   Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  file     FileRef @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("file_in_folder")
}

model MyStorage {
  id      String @id @map("id")
  ownerId String @unique @map("owner_id")
  refId   String @unique @map("ref_id")

  createdAt  DateTime  @map("created_at")
  modifiedAt DateTime  @map("modified_at")
  archivedAt DateTime? @map("archived_at")

  metadata Json @map("metadata")

  ref Folder @relation("MyStorage", fields: [refId], references: [id], onDelete: Cascade)

  @@index([ownerId])
  @@map("my_storage")
}

// ================== Share ================== 
model FilePermission {
  id     String @id @map("id")
  fileId String @unique @map("file_id")
  type   String @map("type") // user, group, public
  perm   String @map("perm") // read, write, admin

  file   FileRef      @relation("file_permission", fields: [fileId], references: [id], onDelete: Cascade)
  shared FileShared[] @relation("file_shared")

  @@map("file_permission")
}

model FileShared {
  id     String @id @map("id")
  permId String @map("perm_id")
  userId String @map("user_id")

  perm FilePermission @relation("file_shared", fields: [permId], references: [id], onDelete: Cascade)

  @@map("file_shared")
}

model FolderPermission {
  id       String @id @map("id")
  folderId String @unique @map("folder_id")
  type     String @map("type") // user, group, public
  perm     String @map("perm") // read, write, admin

  folder Folder         @relation("folder_permission", fields: [folderId], references: [id], onDelete: Cascade)
  shared FolderShared[] @relation("folder_shared")

  @@map("folder_permission")
}

model FolderShared {
  id     String @id @map("id")
  permId String @map("perm_id")
  userId String @map("user_id")

  perm FolderPermission @relation("folder_shared", fields: [permId], references: [id], onDelete: Cascade)

  @@map("folder_shared")
}
